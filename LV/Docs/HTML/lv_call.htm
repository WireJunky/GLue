<!DOCTYPE HTML>
<html>
<head>
   <title>Lua LV library reference &gt; LV.Call</title>
   <meta name="generator" content="Help & Manual">
   <meta name="keywords" content="LV.Call">
   <meta name="description" content="LV.Call">
   <meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
   <meta http-equiv="X-UA-Compatible" content="IE=edge" />
   <link type="text/css" href="default.css" rel="stylesheet">
   <link type="text/css" href="custom.css" rel="stylesheet">
   <script type="text/javascript" src="nsh.js"></script>

<script type="text/javascript">   
// Toggle Toggler 

var toggleCount=false;
var switchState;

function toggleToggles() {

    if (!toggleCount) {
     toggleCount = true;
     HMToggleExpandAll(true);
     switchState = true;
     }
   
     else if (switchState) {
        HMToggleExpandAll(false);
        switchState = false;
        }
        
     else  {
        HMToggleExpandAll(true);
        switchState = true;
        } 
    }
</script>
   
<!-- non-scrolling headers for CHM and browser-based help, local styles-->
<style type="text/css" media="screen"> 
html, body { 
   margin:0; 
   padding:0; 
   overflow: hidden; 
   background: #FFFFFF; 
  }  

div#printheader { 
   display: none;
   }
   #idheader { 
      width:100%; 
      height:auto; 
      padding: 0; 
      margin: 0; 
} 
    #idheaderbg  {
    background: #6F6F6F; 
}
   #callout-table, #overview-table {display:block; position:relative; top:0; left:0;}
   #callout-icon {display:block; position:absolute; top:-11px; left:-11px;}
   #callout-icon-flag {display:block; position:absolute; top:-11px; left:-8px;}
   #callout-table a {text-decoration: none; color: blue;}
   #callout-table a:visited {text-decoration: none; color: blue;}
   #overview-table a {text-decoration: none; color: black;}
   #overview-table a:visited {text-decoration: none; color: black;}
   #callout-table a:hover, #overview-table a:hover {text-decoration: underline;}
   p.help-url { margin: 20px 0 5px 0; text-align: center; font-size: 80%; text-decoration: none }
   </style>
<!--[if lt IE 7]>
<style type="text/css">
  #idcontent {padding: 0px;} 
  #innerdiv {padding: 10px 5px 5px 10px ;} 
</style> 
<![endif]-->
<noscript>
<style type="text/css">
html, body { overflow: auto; }
</style> 
</noscript>
<style type="text/css" media="print">
span.f_Heading1 { color: black; }
#idheader, #printheader img { display:none; }
#printheader { display: block; margin-top: 20px; }
#idcontent { margin-top: 10px; }
</style>  
   <script type="text/javascript" src="jquery.js"></script>
   <script type="text/javascript" src="helpman_settings.js"></script>
   <script type="text/javascript" src="helpman_topicinit.js"></script>

   <script type="text/javascript">
     HMSyncTOC("index.html", "lv_call.htm");
   </script>
   <script type="text/javascript" src="highlight.js"></script>
   <script type="text/javascript">
     $(document).ready(function(){highlight();});
   </script>
</head>
<body>
<!--ZOOMSTOP-->

<div id="printheader"><h1 class="p_Heading1"><span class="f_Heading1">LV.Call</span></h1>
</div>
<div id="idheader">
<div id="idheaderbg">
<table width="100%" border="0" cellspacing="0" cellpadding="0" 
       style="margin: 0px; background: url(header_bg.jpg);">

  <tr valign="bottom">
    <td align="left" valign="bottom" class="topichead">
   <p class="crumbs" id="idnav"><b>Navigation:</b>&nbsp;
   
   <a href="mlua_reference.htm">Lua LV library reference</a>&nbsp;&gt;</p>
   <h1 class="p_Heading1"><span class="f_Heading1">LV.Call</span></h1>

    </td>
    <td align="right" width="120" valign="middle" class="topichead" id="idnav">
    
     <a href="mlua_reference.htm"
        onmouseover="document.images.prev.src='btn_prev_h.gif'" 
        onmouseout="document.images.prev.src='btn_prev_n.gif'"
        ><img name=prev src="btn_prev_n.gif" border=0 alt="Previous page"
        ></a><a href="mlua_reference.htm"
        onmouseover="document.images.main.src='btn_home_h.gif'" 
        onmouseout="document.images.main.src='btn_home_n.gif'"><img name=main src="btn_home_n.gif" border=0 alt="Return to chapter overview"
        ></a><a href="lv_boolarray.htm"
        onmouseover="document.images.next.src='btn_next_h.gif'" 
        onmouseout="document.images.next.src='btn_next_n.gif'"><img name=next src="btn_next_n.gif" border=0 alt="Next page"
        ></a>
    </td>
  </tr>
  <tr><td colspan="2" style="height: 3px; background: url(header_bg_shadow.gif)"></td></tr>
</table>
</div>

<!-- The following code displays Expand All/Collapse All links  below the header in topics containing toggles -->
  

</div>  

<div id="idcontent"><div id="innerdiv"> 
<!--ZOOMRESTART-->
<p><span style="font-size: 12pt; font-weight: bold;">Overview:</span></p>
<p>&nbsp;</p>
<p>The LabVIEW Call <span style="font-style: italic;">LV.Call(&quot;module_name&quot;, &quot;command&quot;, data)</span> function is the primary method of calling back from Lua to LabVIEW. This allows the developer to utilize LabVIEW side functionality inside of Lua scripts. To make the interface as simple and intuitive as possible the decision was made to bundle exposed LabVIEW code into 'modules'. </p>
<p>&nbsp;</p>
<p>These modules receive a string command and data in the form of a LabVIEW variant. A module also has the option of returning variant data back to the calling Lua script. MLua has data translation routines that convert types between the two programming languages. This not only makes development easier, but also safer - as there is no risk of corrupting Lua or LabVIEW's memory space by invalid data conversions. </p>
<p>&nbsp;</p>
<div style="text-align: center;"><div style="margin:0px auto 0px auto;width:334px;padding:0px 0px 0px 0px"><img src="lv.call_ex01_zoom50.png" width="334" height="186" style="border:none" alt="LabVIEW MLua module block diagram" title="LabVIEW MLua module block diagram" /><p style="text-align:center"><span class="f_ImageCaption">LabVIEW MLua module block diagram</span></p></div></div>
<p style="text-align: center;">&nbsp;</p>
<p>In the example above it can be seen that a MLua module is a LabVIEW VI. These modules get added to MLua at run time with the <span style="font-style: italic;"><a href="install_module.htm" class="topiclink">Install Module</a></span> and <span style="font-style: italic;"><a href="register_module.htm" class="topiclink">Register Module</a></span> VIs. They get accessed from within Lua using the LV.Call function.</p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-size: 12pt; font-weight: bold;">Usage:</span></p>
<p>&nbsp;</p>
<p>There are three variants of the LV.Call function, the number of arguments determine how the function will behave. </p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="text-align: left; padding: 0px 0px 0px 15px; margin: 0px 0px 0px 0px;"><span style="font-weight:bold; font-size:10pt; font-family: 'Arial';color:#000000;display:inline-block;width:15px;margin-left:-15px">1.</span><span style="font-weight: bold;">Full version:</span></p><p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">LV.Call(&quot;module_name&quot;, &quot;command&quot;, data)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;">With three arguments a complete or full LV.Call is preformed. The first argument specifies the module which must perform the call, the second is the string command. The third argument is the Lua data to convert and send to the module for processing. If a command is to be sent to a specific module without any associated data, then the data argument must be set to 'nil' to keep the argument count at three. </p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-weight: bold;">example:</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;"> &nbsp;-- send string data to the test module with a command to convert to uppercase</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">res = LV.Call(&quot;test&quot;, &quot;return_uppercase&quot;, &quot;hallo world&quot;)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">return res</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;"> &nbsp;-- send command to the test module, data set to nil</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">res = LV.Call(&quot;test&quot;, &quot;return_status&quot;, nil)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">return res</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">2. Default module:</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">LV.Call(&quot;command&quot;, data)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;">With two arguments a LabVIEW call is made to the current default module. The first argument is the string command, the second is the Lua data to convert and send to the module for processing.</p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-weight: bold;">example:</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">res = LV.Call(&quot;return_uppercase&quot;, &quot;hallo world&quot;)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">return res</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p><span style="font-weight: bold;">3. Command to default module:</span></p>
<p><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">LV.Call(&quot;command&quot;)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;">With a single argument a LabVIEW call is made to the default module with no additional arguments.</p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-weight: bold;">example:</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">res = LV.Call(&quot;hallo world&quot;)</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="font-style: italic;">return res</span></p>
<p style="margin: 0px 0px 0px 24px;"><span style="color: #000000;">&nbsp;</span></p>

<!--ZOOMSTOP-->
</div></div>
<script type="text/javascript">

var lastSlashPos = document.URL.lastIndexOf("/") > document.URL.lastIndexOf("\\") ? document.URL.lastIndexOf("/") : document.URL.lastIndexOf("\\");
if( document.URL.substring(lastSlashPos + 1, lastSlashPos + 4).toLowerCase() != "~hh" )
{
 if (document.all) setTimeout(function() {nsrInit();},20); 
    else nsrInit();
 } 


</script>
</body>
</html>








